--view dataset--
SELECT *
FROM CopyofIMDBTop250MoviesCleanedIMDBTop250Movies

--changing table name--
ALTER TABLE CopyofIMDBTop250MoviesCleanedIMDBTop250Movies RENAME TO Movies

SELECT *
FROM Movies

--top 5 budgeted movies--
SELECT name,budget
from Movies
ORDER BY budget DESC
limit 5

--princess mononoke update--
UPDATE Movies
SET budget = REPLACE(budget, 2400000000, 23500000)

--3 idiots update--
UPDATE Movies
SET budget = REPLACE(budget, 550000000, 670000000)

--top 5 budgeted movies--
SELECT name,budget
from Movies
ORDER BY budget DESC
limit 5

--top 5 rated movies--
SELECT name, rating
FROM Movies
order BY rating DESC
limit 5

--top 5 box office hits--
SELECT name, box_office
FROM Movies
order BY box_office DESC
limit 5

---top 10 highest profit---
SELECT name, (box_office - budget) AS profit
FROM Movies
ORDER BY profit DESC
limit 10

--lowest profit--
SELECT name, (box_office - budget) AS profit
FROM Movies
ORDER BY profit
limit 10

--most popular genres--
SELECT genre, COUNT(*) AS genre_count
FROM (
  SELECT TRIM(value) AS genre
  FROM Movies
  CROSS JOIN json_each('["' || REPLACE(genre, ',', '","') || '"]')
)
GROUP BY genre
ORDER BY genre_count DESC
LIMIT 5

--top 10 movie directors--
SELECT directors, COUNT (*) AS number_of_movies
from Movies
group by directors
ORDER BY number_of_movies DESC
limit 10

--how many movies in each rating category--
SELECT certificate, COUNT (*) as total
FROM Movies
GROUP BY certificate
order BY total DESC	

--best years for movies--
SELECT genre, COUNT(*) AS genre_count
FROM (
  SELECT TRIM(value) AS genre
  FROM Movies
  CROSS JOIN json_each('["' || REPLACE(genre, ',', '","') || '"]')
)
GROUP BY genre
ORDER BY genre_count DESC
LIMIT 5

--how many movies in each decade--
SELECT 
    year/10 * 10 + 1 as decade_start,
    year/10 * 10 + 10 as decade_end,
    COUNT(year) as number_of_movies
FROM  Movies
GROUP BY year/10 
ORDER BY decade_start
  SELECT
    decade_start || ' - ' || decade_end as decade,
    COUNT(year) as number_of_movies
FROM (
    SELECT 
        (year/10) * 10 + 1 as decade_start,
        (year/10) * 10 + 10 as decade_end,
        year
    FROM Movies
) AS subquery
GROUP BY decade_start
ORDER BY decade_start

--most popoular movie genre in each decade--
WITH genre_counts AS (
  SELECT genre, COUNT(*) AS genre_count, year
  FROM (
    SELECT TRIM(value) AS genre, year
    FROM Movies
    CROSS JOIN json_each('["' || REPLACE(genre, ',', '","') || '"]')
  )
  GROUP BY genre, year
), decade_max_genre AS (
  SELECT d.decade_start, d.decade_end, gc.genre,
         ROW_NUMBER() OVER (PARTITION BY d.decade_start ORDER BY gc.genre_count DESC) AS rn
  FROM (
    SELECT 
      year/10 * 10 + 1 AS decade_start,
      year/10 * 10 + 10 AS decade_end
    FROM Movies
    GROUP BY year/10
  ) d
  JOIN genre_counts gc ON gc.year >= d.decade_start AND gc.year <= d.decade_end
)
SELECT decade_start, decade_end, genre
FROM decade_max_genre
WHERE rn = 1
ORDER BY decade_start
WITH genre_counts AS (

SELECT genre, COUNT(*) AS genre_count, year
  FROM (
    SELECT TRIM(value) AS genre, year
    FROM Movies
    CROSS JOIN json_each('["' || REPLACE(genre, ',', '","') || '"]')
  )
  GROUP BY genre, year
), decade_max_genre AS (
  SELECT 
    d.decade_start || ' - ' || d.decade_end AS decade,
    gc.genre,
    ROW_NUMBER() OVER (PARTITION BY d.decade_start ORDER BY gc.genre_count DESC) AS rn
  FROM (
    SELECT 
      (year/10) * 10 + 1 AS decade_start,
      (year/10) * 10 + 10 AS decade_end
    FROM Movies
    GROUP BY year/10
  ) d
  JOIN genre_counts gc ON gc.year >= d.decade_start AND gc.year <= d.decade_end
)
SELECT decade, genre
FROM decade_max_genre
WHERE rn = 1
ORDER BY decade
